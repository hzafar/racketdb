#lang racket/base
;; Generated using protoc-gen-racket v1.1
(require (planet murphy/protobuf:1/syntax))

(define-message-type version-dummy ())
(define-enum-type
 version-dummy:version
 ((v0-1 1063369270)
  (v0-2 1915781601)
  (v0-3 1601562686)
  (v0-4 1074539808)
  (v1-0 885177795)))
(define-enum-type
 version-dummy:protocol
 ((protobuf 656407617) (json 2120839367)))
(define-message-type
 query
 ((optional enum:query:query-type type 1)
  (optional struct:term query 2)
  (optional primitive:int64 token 3)
  (optional primitive:bool obsolete-noreply 4 #f)
  (optional primitive:bool accepts-r-json 5 #f)
  (repeated struct:query:assoc-pair global-optargs 6)))
(define-enum-type
 query:query-type
 ((start 1) (continue 2) (stop 3) (noreply-wait 4) (server-info 5)))
(define-message-type
 query:assoc-pair
 ((optional primitive:string key 1) (optional struct:term val 2)))
(define-message-type
 frame
 ((optional enum:frame:frame-type type 1)
  (optional primitive:int64 pos 2)
  (optional primitive:string opt 3)))
(define-enum-type frame:frame-type ((pos 1) (opt 2)))
(define-message-type backtrace ((repeated struct:frame frames 1)))
(define-message-type
 response
 ((optional enum:response:response-type type 1)
  (optional enum:response:error-type error-type 7)
  (repeated enum:response:response-note notes 6)
  (optional primitive:int64 token 2)
  (repeated struct:datum response 3)
  (optional struct:backtrace backtrace 4)
  (optional struct:datum profile 5)))
(define-enum-type
 response:response-type
 ((success-atom 1)
  (success-sequence 2)
  (success-partial 3)
  (wait-complete 4)
  (server-info 5)
  (client-error 16)
  (compile-error 17)
  (runtime-error 18)))
(define-enum-type
 response:error-type
 ((internal 1000000)
  (resource-limit 2000000)
  (query-logic 3000000)
  (non-existence 3100000)
  (op-failed 4100000)
  (op-indeterminate 4200000)
  (user 5000000)
  (permission-error 6000000)))
(define-enum-type
 response:response-note
 ((sequence-feed 1)
  (atom-feed 2)
  (order-by-limit-feed 3)
  (unioned-feed 4)
  (includes-states 5)))
(define-message-type
 datum
 ((optional enum:datum:datum-type type 1)
  (optional primitive:bool r-bool 2)
  (optional primitive:double r-num 3)
  (optional primitive:string r-str 4)
  (repeated struct:datum r-array 5)
  (repeated struct:datum:assoc-pair r-object 6)))
(define-enum-type
 datum:datum-type
 ((r-null 1)
  (r-bool 2)
  (r-num 3)
  (r-str 4)
  (r-array 5)
  (r-object 6)
  (r-json 7)))
(define-message-type
 datum:assoc-pair
 ((optional primitive:string key 1) (optional struct:datum val 2)))
(define-message-type
 term
 ((optional enum:term:term-type type 1)
  (optional struct:datum datum 2)
  (repeated struct:term args 3)
  (repeated struct:term:assoc-pair optargs 4)))
(define-enum-type
 term:term-type
 ((datum 1)
  (make-array 2)
  (make-obj 3)
  (var 10)
  (javascript 11)
  (uuid 169)
  (http 153)
  (error 12)
  (implicit-var 13)
  (db 14)
  (table 15)
  (get 16)
  (get-all 78)
  (eq 17)
  (ne 18)
  (lt 19)
  (le 20)
  (gt 21)
  (ge 22)
  (not 23)
  (add 24)
  (sub 25)
  (mul 26)
  (div 27)
  (mod 28)
  (floor 183)
  (ceil 184)
  (round 185)
  (append 29)
  (prepend 80)
  (difference 95)
  (set-insert 88)
  (set-intersection 89)
  (set-union 90)
  (set-difference 91)
  (slice 30)
  (skip 70)
  (limit 71)
  (offsets-of 87)
  (contains 93)
  (get-field 31)
  (keys 94)
  (values 186)
  (object 143)
  (has-fields 32)
  (with-fields 96)
  (pluck 33)
  (without 34)
  (merge 35)
  (between-deprecated 36)
  (between 182)
  (reduce 37)
  (map 38)
  (fold 187)
  (filter 39)
  (concat-map 40)
  (order-by 41)
  (distinct 42)
  (count 43)
  (empty? 86)
  (union 44)
  (nth 45)
  (bracket 170)
  (inner-join 48)
  (outer-join 49)
  (eq-join 50)
  (zip 72)
  (range 173)
  (insert-at 82)
  (delete-at 83)
  (change-at 84)
  (splice-at 85)
  (coerce-to 51)
  (type-of 52)
  (update 53)
  (delete 54)
  (replace 55)
  (insert 56)
  (db-create 57)
  (db-drop 58)
  (db-list 59)
  (table-create 60)
  (table-drop 61)
  (table-list 62)
  (config 174)
  (status 175)
  (wait 177)
  (reconfigure 176)
  (rebalance 179)
  (sync 138)
  (grant 188)
  (index-create 75)
  (index-drop 76)
  (index-list 77)
  (index-status 139)
  (index-wait 140)
  (index-rename 156)
  (set-write-hook 189)
  (get-write-hook 190)
  (funcall 64)
  (branch 65)
  (or 66)
  (and 67)
  (for-each 68)
  (func 69)
  (asc 73)
  (desc 74)
  (info 79)
  (match 97)
  (upcase 141)
  (downcase 142)
  (sample 81)
  (default 92)
  (json 98)
  (to-json-string 172)
  (iso8601 99)
  (to-iso8601 100)
  (epoch-time 101)
  (to-epoch-time 102)
  (now 103)
  (in-timezone 104)
  (during 105)
  (date 106)
  (time-of-day 126)
  (timezone 127)
  (year 128)
  (month 129)
  (day 130)
  (day-of-week 131)
  (day-of-year 132)
  (hours 133)
  (minutes 134)
  (seconds 135)
  (time 136)
  (monday 107)
  (tuesday 108)
  (wednesday 109)
  (thursday 110)
  (friday 111)
  (saturday 112)
  (sunday 113)
  (january 114)
  (february 115)
  (march 116)
  (april 117)
  (may 118)
  (june 119)
  (july 120)
  (august 121)
  (september 122)
  (october 123)
  (november 124)
  (december 125)
  (literal 137)
  (group 144)
  (sum 145)
  (avg 146)
  (min 147)
  (max 148)
  (split 149)
  (ungroup 150)
  (random 151)
  (changes 152)
  (args 154)
  (binary 155)
  (geojson 157)
  (to-geojson 158)
  (point 159)
  (line 160)
  (polygon 161)
  (distance 162)
  (intersects 163)
  (includes 164)
  (circle 165)
  (get-intersecting 166)
  (fill 167)
  (get-nearest 168)
  (polygon-sub 171)
  (minval 180)
  (maxval 181)))
(define-message-type
 term:assoc-pair
 ((optional primitive:string key 1) (optional struct:term val 2)))

(provide (all-defined-out))
